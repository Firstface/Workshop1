import React, { useRef, useState, useContext } from "react";
import {
  useTranslate,
  useGetLocale,
  usePermissions,
  IResourceComponentsProps,
  useNavigation,
  useResource,
} from "@refinedev/core";
import enUS from "antd/es/date-picker/locale/en_US";
import zhCN from "antd/es/date-picker/locale/zh_CN";
import { useForm, Show } from "@refinedev/antd";
import {
  Form,
  Input,
  Select,
  DatePicker,
  Row,
  Col,
  Button,
  Card,
} from "antd";
import dayjs from "dayjs";
import config from "../../config";
import { CreateOrEdit } from "../../components/crud/createOrEdit";
import FileListUploadAndEdit from "./fileListUploadAndEdit";
import { ColorModeContext } from "../../contexts/color-mode";

const { Option } = Select;
const { TextArea } = Input;

const getRemediationFormItems = (
  index,
  translate,
  datePickerLocale,
  canEditLineDepartmentVerificationComment,
  canEditGeneralFields,
  getReadOnlyStyle,
  status
) => {
  const baseItems = [
    <Form.Item
      label={translate("remediations.fields.planEnglish")}
      name={`remediationPlans[${index}].planEnglish`}
      rules={[{ required: true, message: translate("errors.required") }]}
    >
      <Input
        readOnly={!canEditGeneralFields}
        style={{
          ...getReadOnlyStyle(canEditGeneralFields)
        }}
      />
    </Form.Item>,
    <Form.Item
      label={translate("remediations.fields.planChinese")}
      name={`remediationPlans[${index}].planChinese`}
      rules={[{ required: true, message: translate("errors.required") }]}
    >
      <Input
        readOnly={!canEditGeneralFields}
        style={{
          ...getReadOnlyStyle(canEditGeneralFields)
        }}
      />
    </Form.Item>,
    <Form.Item
      label={translate("remediations.fields.deadline")}
      name={`remediationPlans[${index}].deadline`}
      rules={[{ required: true, message: translate("errors.required") }]}
    >
      <DatePicker
        picker="month"
        locale={datePickerLocale}
        style={{
          width: "100%",
          ...getReadOnlyStyle(canEditGeneralFields)
        }}
        placeholder={translate("common.SelectMonth")}
        disabled={!canEditGeneralFields}
      />
    </Form.Item>,
  ];

  if (
    status === "PENDING_REMEDIATION_DEPT_ACTION" ||
    status === "PENDING_LINE_DEPT_VERIFICATION" ||
    status === "PENDING_IAD_ASSESSMENT"
  ) {
    baseItems.push(
      <Form.Item
        label={translate("remediations.fields.lineDeptVerificationComment")}
        name={`remediationPlans[${index}].lineDeptVerificationComment`}
        rules={[
          {
            required: canEditLineDepartmentVerificationComment(),
            message: translate("errors.required"),
          },
        ]}
      >
        <Input
          readOnly={!canEditLineDepartmentVerificationComment()}
          style={{
            cursor: canEditLineDepartmentVerificationComment() ? 'text' : 'not-allowed',
            ...getReadOnlyStyle(canEditLineDepartmentVerificationComment())
          }}
        />
      </Form.Item>,
      <Form.Item
        label={translate("remediations.fields.remediationDeptComment")}
        name={`remediationPlans[${index}].remediationDeptComment`}
      >
        <Input
          readOnly={!canEditGeneralFields}
          style={{
            ...getReadOnlyStyle(canEditGeneralFields)
          }}
        />
      </Form.Item>
    );
  }

  if (status === "PENDING_IAD_ASSESSMENT") {
    baseItems.push(
      <Form.Item
        label={translate("remediations.fields.followUp")}
        name={`remediationPlans[${index}].followUp`}
      >
        <Input
          readOnly={!canEditGeneralFields}
          style={{
            ...getReadOnlyStyle(canEditGeneralFields)
          }}
        />
      </Form.Item>,
      <Form.Item
        label={translate("remediations.fields.followUpDate")}
        name={`remediationPlans[${index}].followUpDate`}
      >
        <DatePicker
          picker="month"
          locale={datePickerLocale}
          style={{
            width: "100%",
            ...getReadOnlyStyle(canEditGeneralFields)
          }}
          placeholder={translate("remediations.fields.followUpDate")}
          disabled={!canEditGeneralFields}
        />
      </Form.Item>,
      <Form.Item
        label={translate("remediations.fields.iadAssessmentStatus")}
        name={`remediationPlans[${index}].iadAssessmentStatus`}
      >
        <Select
          allowClear
          disabled={!canEditGeneralFields}
          style={{
            ...getReadOnlyStyle(canEditGeneralFields)
          }}
        >
          {config.issue.iadAssessmentStatus.map((option: string) => (
            <Option key={option} value={option}>
              {translate(`remediations.iadAssessmentStatus.${option}`)}
            </Option>
          ))}
        </Select>
      </Form.Item>,
    );
  }

  return baseItems;
};

export const IssueCreateOrEdit: React.FC<IResourceComponentsProps> = (props) => {
  const { data: permissions } = usePermissions<string[]>();
  const { mode } = useContext(ColorModeContext);
  const { formProps, saveButtonProps, formLoading, queryResult } = useForm({
    refineCoreProps: {
      redirect: "show",
      onMutationSuccess: () => {
        window.scrollTo(0, 0);
      },
    },
  });

  const { list } = useNavigation();
  const { resource } = useResource();

  const formRef = useRef(null);

  const [formChanged, setFormChanged] = useState(false);

  const translate = useTranslate();
  const locale = useGetLocale();
  const currentLocale = locale();
  const datePickerLocale = currentLocale === "zh-CN" ? zhCN : enUS;
  const issueData = queryResult?.data?.data;
  const departments = props.options?.departments ?? { array: [], map: {} };

  const departmentOptions = React.useMemo(() => {
    return departments.array.map((department: any) => ({
      value: department.code,
      label: currentLocale === "zh-CN" ? department.chineseName : department.englishName,
    }));
  }, [departments, currentLocale]);

  const [selectedRemediationCodes, setSelectedRemediationCodes] = React.useState<string[]>([]);

  React.useEffect(() => {
    if (issueData?.remediations) {
      const codes = issueData.remediations.map((r: any) => {
        const matched = Object.entries(departments.map).find(([, dept]) => dept.id === r.orgUnitId);
        return matched?.[0];
      }).filter(Boolean);

      setSelectedRemediationCodes(codes);
    }
  }, [issueData?.remediations, departments.map]);

  const isRemediationInProgress = issueData?.status === "REMEDIATION_IN_PROGRESS";

  const canEditLineDepartmentVerificationComment = () => {
    return permissions?.some((permission) =>
      permission === "line_verifier" || permission === "auditor"
    ) || false;
  };

  const isLineVerifier = () => {
    return permissions?.some((permission) => permission === "line_verifier") || false;
  };

  const isAuditor = () => {
    return permissions?.some((permission) => permission === "auditor") || false;
  };

  const canEditGeneralFields = () => {
    return isAuditor() || !isLineVerifier();
  };

  const getReadOnlyStyle = (canEdit: boolean) => {
    if (!canEdit) {
      if (mode === "dark") {
        return {
          backgroundColor: '#2a2a2a',
          color: '#8c8c8c',
          cursor: 'not-allowed',
          borderColor: '#434343'
        };
      } else {
        return {
          backgroundColor: '#f5f5f5',
          color: '#999999',
          cursor: 'not-allowed'
        };
      }
    }
    return {};
  };

  const remediationInitialValues = React.useMemo(() => {
    return selectedRemediationCodes.map((code, index) => {
      const remediation = issueData?.remediations?.find((r) => departments.map[code]?.id === r.orgUnitId);
      return {
        planEnglish: remediation?.planEnglish,
        planChinese: remediation?.planChinese,
        deadline: remediation?.deadline ? dayjs(remediation.deadline, "YYYY-MM") : undefined,
        lineDeptVerificationComment: remediation?.lineDeptVerificationComment,
        followUp: remediation?.followUp,
        followUpDate: remediation?.followUpDate ? dayjs(remediation.followUpDate, "YYYY-MM") : undefined,
        iadAssessmentStatus: remediation?.iadAssessmentStatus,
        remediationDeptComment: remediation?.remediationDeptComment
      };
    });
  }, [selectedRemediationCodes, issueData?.remediations, departments.map]);

  const handleValuesChange = () => {
    setFormChanged(true);
  };

  const handleButtonClick = () => {
    console.log("Resource:", resource);

    if (formChanged) {
      formRef.current?.submit();
    } else {
      list(resource?.name || "issues");
    }
  };

  return (
    <Show>
      <CreateOrEdit
        action={props.options?.action || "create"}
        saveButtonProps={{
          ...saveButtonProps,
          style: { display: 'none' }
        }}
        isLoading={formLoading}
      >
        <Form
          {...formProps}
          ref={formRef}
          layout="vertical"
          initialValues={{
            ...formProps.initialValues,
            reportName: issueData?.reportName,
            masNumber: issueData?.masNumber,
            inspectionDepartmentCode: issueData?.inspectionDepartmentCode,
            inspectionYear: issueData?.inspectionYear ? dayjs(issueData.inspectionYear, "YYYY") : undefined,
            findingsEnglish: issueData?.findingsEnglish,
            findingsChinese: issueData?.findingsChinese,
            auditRecommendationsEnglish: issueData?.auditRecommendationsEnglish,
            auditRecommendationsChinese: issueData?.auditRecommendationsChinese,
            lineDepartmentCode: issueData?.lineOrgUnitId
              ? Object.keys(departments.map).find((code) => departments.map[code]?.id === issueData.lineOrgUnitId)
              : undefined,
            nextFollowUpDate: issueData?.nextFollowUpDate ? dayjs(issueData.nextFollowUpDate, "YYYY-MM") : undefined,
            recurringType: issueData?.recurringType,
            riskType: issueData?.riskType,
            ...remediationInitialValues.reduce((acc, values, index) => {
              Object.entries(values).forEach(([key, value]) => {
                acc[`remediationPlans[${index}].${key}`] = value;
              });
              return acc;
            }, {}),
          }}
          onValuesChange={handleValuesChange}
          onFinish={(values) => {
            const formattedIssueBaseDto = {
              reportName: values.reportName || "",
              masNumber: values.masNumber || "",
              inspectionDepartmentCode: values.inspectionDepartmentCode || "",
              inspectionYear: values.inspectionYear ? values.inspectionYear.format("YYYY") : "",
              findingsEnglish: values.findingsEnglish || "",
              findingsChinese: values.findingsChinese || "",
              auditRecommendationsEnglish: values.auditRecommendationsEnglish || "",
              auditRecommendationsChinese: values.auditRecommendationsChinese || "",
              lineOrgUnitId: departments.map[values.lineDepartmentCode]?.id || null,
              nextFollowUpDate: values.nextFollowUpDate ? values.nextFollowUpDate.format("YYYY-MM") : "",
              riskType: values.riskType || null,
              recurringType: values.recurringType || null,
            };

            const formattedRemediations = selectedRemediationCodes.map((code, index) => {
              const originalRemediation = issueData?.remediations?.find((r) => departments.map[code]?.id === r.orgUnitId);
              const remediation = {
                id: originalRemediation?.id || "",
                issueId: issueData?.id,
                departmentCode: code,
                planEnglish: values[`remediationPlans[${index}].planEnglish`] || "",
                planChinese: values[`remediationPlans[${index}].planChinese`] || "",
                followUp: values[`remediationPlans[${index}].followUp`] || null,
                followUpDate: values[`remediationPlans[${index}].followUpDate`] ? values[`remediationPlans[${index}].followUpDate`].format("YYYY-MM") : "",
                iadAssessmentStatus: values[`remediationPlans[${index}].iadAssessmentStatus`] || "IN_PROGRESS",
                deadline: values[`remediationPlans[${index}].deadline`] ? values[`remediationPlans[${index}].deadline`].format("YYYY-MM") : "",
                status: originalRemediation?.status || "DRAFT",
                remediationDeptComment: values[`remediationPlans[${index}].remediationDeptComment`] || "",
                lineDeptVerificationComment: values[`remediationPlans[${index}].lineDeptVerificationComment`] || "",
                lastModifiedAt: originalRemediation?.lastModifiedAt,
                orgUnitId: departments.map[code]?.id || null,
              };
              return remediation;
            });

            const formattedIssueUpdateDto = {
              ...formattedIssueBaseDto,
              id: issueData?.id,
              remediations: formattedRemediations,
              lastModifiedAt: issueData?.lastModifiedAt,
            };

            return formProps.onFinish?.(formattedIssueUpdateDto);
          }}
        >
          <Form.Item
            label={translate("issues.fields.reportName")}
            name="reportName"
            rules={[{ required: true, message: translate("errors.required") }]}
          >
            <Input
              readOnly={!canEditGeneralFields()}
              style={{
                ...getReadOnlyStyle(canEditGeneralFields())
              }}
            />
          </Form.Item>

          <Form.Item label={translate("issues.fields.masNumber")} name="masNumber">
            <Input
              readOnly={!canEditGeneralFields()}
              style={{
                ...getReadOnlyStyle(canEditGeneralFields())
              }}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label={translate("issues.fields.inspectionDepartment")} name="inspectionDepartmentCode">
                <Select
                  allowClear
                  disabled={!canEditGeneralFields()}
                  style={{
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                >
                  {config.issue.inspectionDepartmentCodes.map(code => (
                    <Option key={code} value={code}>{translate(`issues.inspectionDepartment.${code}`)}</Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label={translate("issues.fields.inspectionYear")} name="inspectionYear">
                <DatePicker
                  picker="year"
                  locale={datePickerLocale}
                  style={{
                    width: "100%",
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                  placeholder={translate("issues.fields.inspectionYear")}
                  disabled={!canEditGeneralFields()}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item label={translate("issues.fields.findingsEnglish")} name="findingsEnglish">
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={{
                ...getReadOnlyStyle(canEditGeneralFields())
              }}
            />
          </Form.Item>
          <Form.Item label={translate("issues.fields.findingsChinese")} name="findingsChinese">
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={{
                ...getReadOnlyStyle(canEditGeneralFields())
              }}
            />
          </Form.Item>
          <Form.Item label={translate("issues.fields.auditRecommendationsEnglish")} name="auditRecommendationsEnglish">
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={{
                ...getReadOnlyStyle(canEditGeneralFields())
              }}
            />
          </Form.Item>
          <Form.Item label={translate("issues.fields.auditRecommendationsChinese")} name="auditRecommendationsChinese">
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={{
                ...getReadOnlyStyle(canEditGeneralFields())
              }}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label={translate("issues.fields.lineDepartment")} name="lineDepartmentCode">
                <Select
                  key={currentLocale}
                  allowClear
                  options={departmentOptions}
                  disabled={!canEditGeneralFields()}
                  style={{
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label={translate("issues.fields.nextFollowUpDate")} name="nextFollowUpDate">
                <DatePicker
                  picker="month"
                  locale={datePickerLocale}
                  style={{
                    width: "100%",
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                  placeholder={translate("issues.fields.nextFollowUpDate")}
                  disabled={!canEditGeneralFields()}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item label={translate("issues.fields.recurringType")} name="recurringType">
                <Select
                  allowClear
                  disabled={!canEditGeneralFields()}
                  style={{
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                >
                  {config.issue.recurringType.map(option => (
                    <Option key={option} value={option}>{translate(`issues.recurringType.${option}`)}</Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label={translate("issues.fields.riskType")} name="riskType">
                <Select
                  allowClear
                  disabled={!canEditGeneralFields()}
                  style={{
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                >
                  {config.issue.riskType.map(option => (
                    <Option key={option} value={option}>{translate(`issues.riskType.${option}`)}</Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item label={translate("issues.fields.remediationDepartments")}>
            {isRemediationInProgress ? (
              selectedRemediationCodes.map((code, index) => {
                const remediation = issueData?.remediations?.find((r) => departments.map[code]?.id === r.orgUnitId);
                const status = remediation?.status || "N/A";
                const remediationId = remediation?.id;
                return (
                  <Card key={index} style={{ marginBottom: 16, position: "relative" }}>
                    <div style={{ fontWeight: 600, marginBottom: 8, display: 'flex', justifyContent: 'space-between' }}>
                      {departmentOptions.find(opt => opt.value === code)?.label}
                      <span style={{ border: '1px solid #ccc', borderRadius: '4px', padding: '2px 6px' }}>{status}</span>
                    </div>
                    {getRemediationFormItems(
                      index,
                      translate,
                      datePickerLocale,
                      canEditLineDepartmentVerificationComment,
                      canEditGeneralFields(),
                      getReadOnlyStyle,
                      status
                    )}
                    {
                      (status === "PENDING_REMEDIATION_DEPT_ACTION" || status === "PENDING_LINE_DEPT_VERIFICATION" || status === "PENDING_IAD_ASSESSMENT") && (
                        <div style={{ marginTop: 16 }}>
                          <FileListUploadAndEdit remediationId={remediationId} />
                        </div>
                      )
                    }
                  </Card>
                );
              })
            ) : (
              <Select
                mode="multiple"
                allowClear
                value={selectedRemediationCodes}
                  onChange={(value) => {
                    setSelectedRemediationCodes(value);
                    setFormChanged(true);
                  }}
                options={departments.array.map((d: any) => ({
                  label: currentLocale === "zh-CN" ? d.chineseName : d.englishName,
                  value: d.code,
                }))}
                  disabled={!canEditGeneralFields()}
                  style={{
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
              />
            )}
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              onClick={handleButtonClick}
              loading={formLoading}
            >
              {formChanged
                ? translate("buttons.save")
                : translate("buttons.back")}
            </Button>
          </Form.Item>
        </Form>
      </CreateOrEdit>
    </Show>
  );
};
