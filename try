import React, { useRef, useState, useContext } from "react";
import {
  useTranslate,
  useGetLocale,
  usePermissions,
  IResourceComponentsProps,
  useNavigation,
  useResource,
} from "@refinedev/core";
import enUS from "antd/es/date-picker/locale/en_US";
import zhCN from "antd/es/date-picker/locale/zh_CN";
import { useForm, Show } from "@refinedev/antd";
import {
  Form,
  Input,
  Select,
  DatePicker,
  Row,
  Col,
  Button,
  Card,
} from "antd";
import dayjs from "dayjs";
import config from "../../config";
import { CreateOrEdit } from "../../components/crud/createOrEdit";
import FileListUploadAndEdit from "./fileListUploadAndEdit";
import { ColorModeContext } from "../../contexts/color-mode";

const { TextArea } = Input;


export const IssueCreateOrEdit: React.FC<IResourceComponentsProps> = (props) => {
  const { data: permissions } = usePermissions<string[]>();
  const { mode } = useContext(ColorModeContext);
  const { formProps, saveButtonProps, formLoading, queryResult } = useForm({
    refineCoreProps: {
      redirect: "show",
      onMutationSuccess: () => {
        window.scrollTo(0, 0);
      },
    },
  });

  const { list } = useNavigation();
  const { resource } = useResource();

  const formRef = useRef<any>(null);
  const [formChanged, setFormChanged] = useState(false);

  const translate = useTranslate();
  const locale = useGetLocale();
  const currentLocale = locale();
  const datePickerLocale = currentLocale === "zh-CN" ? zhCN : enUS;
  const issueData = queryResult?.data?.data;
  const departments = props.options?.departments ?? { array: [], map: {} };

  const departmentOptions = React.useMemo(() => {
    return departments.array.map((department: any) => ({
      value: department.code,
      label: currentLocale === "zh-CN" ? department.chineseName : department.englishName,
    }));
  }, [departments, currentLocale]);

  const isRemediationInProgress = issueData?.status === "REMEDIATION_IN_PROGRESS";

  const canEditLineDepartmentVerificationComment = () => {
    return permissions?.some((permission) =>
      permission === "line_verifier" || permission === "auditor"
    ) || false;
  };

  const isLineVerifier = () => {
    return permissions?.some((permission) => permission === "line_verifier") || false;
  };

  const isAuditor = () => {
    return permissions?.some((permission) => permission === "auditor") || false;
  };

  const canEditGeneralFields = () => {
    return isAuditor() || !isLineVerifier();
  };

  const getReadOnlyStyle = (canEdit: boolean) => {
    if (!canEdit) {
      if (mode === "dark") {
        return {
          backgroundColor: '#2a2a2a',
          color: '#8c8c8c',
          cursor: 'not-allowed',
          borderColor: '#434343'
        };
      } else {
        return {
          backgroundColor: '#f5f5f5',
          color: '#999999',
          cursor: 'not-allowed'
        };
      }
    }
    return {};
  };

  const handleValuesChange = () => {
    setFormChanged(true);
  };

  const handleButtonClick = () => {
    if (formChanged) {
      formRef.current?.submit();
    } else {
      list(resource?.name || "issues");
    }
  };

  const initialValues = React.useMemo(() => ({
    id: issueData?.id,
    lastModifiedAt: issueData?.lastModifiedAt,
    reportName: issueData?.reportName,
    masNumber: issueData?.masNumber,
    inspectionDepartmentCode: issueData?.inspectionDepartmentCode,
    inspectionYear: issueData?.inspectionYear ? dayjs(issueData.inspectionYear, "YYYY") : undefined,
    findingsEnglish: issueData?.findingsEnglish,
    findingsChinese: issueData?.findingsChinese,
    auditRecommendationsEnglish: issueData?.auditRecommendationsEnglish,
    auditRecommendationsChinese: issueData?.auditRecommendationsChinese,
    lineDepartmentCode: issueData?.lineOrgUnitId
      ? Object.keys(departments.map).find((code) => departments.map[code]?.id === issueData.lineOrgUnitId)
      : undefined,
    lineOrgUnitId: issueData?.lineOrgUnitId,
    nextFollowUpDate: issueData?.nextFollowUpDate ? dayjs(issueData.nextFollowUpDate, "YYYY-MM") : undefined,
    recurringType: issueData?.recurringType,
    riskType: issueData?.riskType,
    remediations: (issueData?.remediations ?? []).map(remediation => ({
      ...remediation,
      deadline: remediation.deadline ? dayjs(remediation.deadline, "YYYY-MM") : undefined,
      followUpDate: remediation.followUpDate ? dayjs(remediation.followUpDate, "YYYY-MM") : undefined,
    }))
  }), [issueData, departments.map]);


  return (
    <Show>
      <CreateOrEdit
        action={props.options?.action || "create"}
        saveButtonProps={{
          ...saveButtonProps,
          style: { display: 'none' }
        }}
        isLoading={formLoading}
      >
        <Form
          {...formProps}
          ref={formRef}
          layout="vertical"
          onValuesChange={handleValuesChange}
          initialValues={initialValues}
        >
          <Form.Item name="id" hidden>
            <Input />
          </Form.Item>
          <Form.Item name="lastModifiedAt" hidden>
            <Input />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.reportName")}
            name="reportName"
            rules={[{ required: true, message: translate("errors.required") }]}
          >
            <Input
              readOnly={!canEditGeneralFields()}
              style={getReadOnlyStyle(canEditGeneralFields())}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.masNumber")}
            name="masNumber"
          >
            <Input
              readOnly={!canEditGeneralFields()}
              style={getReadOnlyStyle(canEditGeneralFields())}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.inspectionDepartment")}
                name="inspectionDepartmentCode"
              >
                <Select
                  allowClear
                  disabled={!canEditGeneralFields()}
                  style={getReadOnlyStyle(canEditGeneralFields())}
                  options={config.issue.inspectionDepartmentCodes.map(code => ({
                    value: code,
                    label: translate(`issues.inspectionDepartment.${code}`)
                  }))}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.inspectionYear")}
                name="inspectionYear"
              >
                <DatePicker
                  picker="year"
                  locale={datePickerLocale}
                  style={{
                    width: "100%",
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                  placeholder={translate("issues.fields.inspectionYear")}
                  disabled={!canEditGeneralFields()}
                  onChange={(data) => {
                    formProps.form?.setFieldValue('inspectionYear', data);
                  }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            label={translate("issues.fields.findingsEnglish")}
            name="findingsEnglish"
          >
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={getReadOnlyStyle(canEditGeneralFields())}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.findingsChinese")}
            name="findingsChinese"
          >
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={getReadOnlyStyle(canEditGeneralFields())}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.auditRecommendationsEnglish")}
            name="auditRecommendationsEnglish"
          >
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={getReadOnlyStyle(canEditGeneralFields())}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.auditRecommendationsChinese")}
            name="auditRecommendationsChinese"
          >
            <TextArea
              rows={3}
              readOnly={!canEditGeneralFields()}
              style={getReadOnlyStyle(canEditGeneralFields())}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.lineDepartment")}
                name="lineDepartmentCode"
              >
                <Select
                  key={currentLocale}
                  allowClear
                  options={departmentOptions}
                  disabled={!canEditGeneralFields()}
                  style={getReadOnlyStyle(canEditGeneralFields())}
                  onChange={(value) => {
                    const orgUnitId = value ? departments.map[value]?.id : null;
                    formProps.form?.setFieldValue('lineOrgUnitId', orgUnitId);
                  }}
                />
              </Form.Item>
              <Form.Item name="lineOrgUnitId" hidden>
                <Input />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.nextFollowUpDate")}
                name="nextFollowUpDate"
              >
                <DatePicker
                  picker="month"
                  locale={datePickerLocale}
                  style={{
                    width: "100%",
                    ...getReadOnlyStyle(canEditGeneralFields())
                  }}
                  placeholder={translate("issues.fields.nextFollowUpDate")}
                  disabled={!canEditGeneralFields()}
                  onChange={(data) => {
                    formProps.form?.setFieldValue('nextFollowUpDate', data);
                  }}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.recurringType")}
                name="recurringType"
              >
                <Select
                  allowClear
                  disabled={!canEditGeneralFields()}
                  style={getReadOnlyStyle(canEditGeneralFields())}
                  options={config.issue.recurringType.map(option => ({
                    value: option,
                    label: translate(`issues.recurringType.${option}`),
                  }))}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.riskType")}
                name="riskType"
              >
                <Select
                  allowClear
                  disabled={!canEditGeneralFields()}
                  style={getReadOnlyStyle(canEditGeneralFields())}
                  options={config.issue.riskType.map(option => ({
                    value: option,
                    label: translate(`issues.riskType.${option}`),
                  }))}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.List name="remediations">
            {(fields) => (
              <>
                {fields.map((field, index) => {
                  const remediation = formProps.form?.getFieldValue(['remediations', index]) || {};
                  const status = remediation?.status || "N/A";
                  const remediationId = remediation?.id;
                  return (
                    <Card
                      key={field.key}
                      style={{ marginBottom: 16 }}
                      variant="outlined"
                    >
                      <Form.Item name={[field.name, 'id']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'issueId']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'departmentCode']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'status']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'lastModifiedAt']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'orgUnitId']} hidden>
                        <Input />
                      </Form.Item>

                      <div style={{ fontWeight: 600, marginBottom: 8, display: 'flex', justifyContent: 'space-between' }}>
                        {departmentOptions.find(opt => opt.value === remediation?.departmentCode)?.label}
                        <span style={{ border: '1px solid #ccc', borderRadius: '4px', padding: '2px 6px' }}>{status}</span>
                      </div>

                      <Form.Item
                        label={translate("remediations.fields.planEnglish")}
                        name={[field.name, 'planEnglish']}
                        rules={[{ required: true, message: translate("errors.required") }]}
                      >
                        <Input
                          readOnly={!canEditGeneralFields()}
                          style={getReadOnlyStyle(canEditGeneralFields())}
                        />
                      </Form.Item>

                      <Form.Item
                        label={translate("remediations.fields.planChinese")}
                        name={[field.name, 'planChinese']}
                        rules={[{ required: true, message: translate("errors.required") }]}
                      >
                        <Input
                          readOnly={!canEditGeneralFields()}
                          style={getReadOnlyStyle(canEditGeneralFields())}
                        />
                      </Form.Item>

                      <Form.Item
                        label={translate("remediations.fields.deadline")}
                        name={[field.name, 'deadline']}
                        rules={[{ required: true, message: translate("errors.required") }]}
                      >
                        <DatePicker
                          picker="month"
                          locale={datePickerLocale}
                          style={{
                            width: "100%",
                            ...getReadOnlyStyle(canEditGeneralFields())
                          }}
                          placeholder={translate("common.SelectMonth")}
                          disabled={!canEditGeneralFields()}
                          onChange={(data) => {
                            formProps.form?.setFieldValue(['remediations', index, 'deadline'], data);
                          }}
                        />
                      </Form.Item>

                      {(status === "PENDING_REMEDIATION_DEPT_ACTION" ||
                        status === "PENDING_LINE_DEPT_VERIFICATION" ||
                        status === "PENDING_IAD_ASSESSMENT") && (
                          <>
                            <Form.Item
                              label={translate("remediations.fields.lineDeptVerificationComment")}
                              name={[field.name, 'lineDeptVerificationComment']}
                              rules={[
                                {
                                  required: canEditLineDepartmentVerificationComment(),
                                  message: translate("errors.required"),
                                },
                              ]}
                            >
                              <Input
                                readOnly={!canEditLineDepartmentVerificationComment()}
                                style={{
                                  cursor: canEditLineDepartmentVerificationComment() ? 'text' : 'not-allowed',
                                  ...getReadOnlyStyle(canEditLineDepartmentVerificationComment())
                                }}
                              />
                            </Form.Item>

                            <Form.Item
                              label={translate("remediations.fields.remediationDeptComment")}
                              name={[field.name, 'remediationDeptComment']}
                            >
                              <Input
                                readOnly={!canEditGeneralFields()}
                                style={getReadOnlyStyle(canEditGeneralFields())}
                              />
                            </Form.Item>
                          </>
                        )}

                      {status === "PENDING_IAD_ASSESSMENT" && (
                        <>
                          <Form.Item
                            label={translate("remediations.fields.followUp")}
                            name={[field.name, 'followUp']}
                          >
                            <Input
                              readOnly={!canEditGeneralFields()}
                              style={getReadOnlyStyle(canEditGeneralFields())}
                            />
                          </Form.Item>

                          <Form.Item
                            label={translate("remediations.fields.followUpDate")}
                            name={[field.name, 'followUpDate']}
                          >
                            <DatePicker
                              picker="month"
                              locale={datePickerLocale}
                              style={{
                                width: "100%",
                                ...getReadOnlyStyle(canEditGeneralFields())
                              }}
                              placeholder={translate("remediations.fields.followUpDate")}
                              disabled={!canEditGeneralFields()}
                              onChange={(data) => {
                                formProps.form?.setFieldValue(['remediations', index, 'followUpDate'], data);
                              }}
                            />
                          </Form.Item>

                          <Form.Item
                            label={translate("remediations.fields.iadAssessmentStatus")}
                            name={[field.name, 'iadAssessmentStatus']}
                          >
                            <Select
                              allowClear
                              disabled={!canEditGeneralFields()}
                              style={getReadOnlyStyle(canEditGeneralFields())}
                              options={config.issue.iadAssessmentStatus.map((option: string) => ({
                                value: option,
                                label: translate(`remediations.iadAssessmentStatus.${option}`),
                              }))}
                            />
                          </Form.Item>
                        </>
                      )}

                      {(status === "PENDING_REMEDIATION_DEPT_ACTION" ||
                        status === "PENDING_LINE_DEPT_VERIFICATION" ||
                        status === "PENDING_IAD_ASSESSMENT") && (
                        <div style={{ marginTop: 16 }}>
                          <FileListUploadAndEdit remediationId={remediationId} />
                        </div>
                        )}
                    </Card>
                  );
                })}
              </>
            )}
          </Form.List>

          {!isRemediationInProgress && (
            <Form.Item
              label={translate("issues.fields.remediationDepartments")}
              name="remediations"
              valuePropName="remediations"
            >
              <Select
                mode="multiple"
                allowClear
                value={issueData?.remediations?.map((r: any) => r.departmentCode) || []}
                onChange={(selectedCodes) => {
                  const newRemediations = selectedCodes.map((departmentCode: string) => {
                    const existingRemediation = issueData?.remediations?.find((r: any) => r.departmentCode === departmentCode);
                    return existingRemediation || { departmentCode };
                  });
                  formProps.form?.setFieldValue('remediations', newRemediations);
                }}
                options={departments.array.map((d: any) => ({
                  label: currentLocale === "zh-CN" ? d.chineseName : d.englishName,
                  value: d.code,
                }))}
                disabled={!canEditGeneralFields()}
                style={getReadOnlyStyle(canEditGeneralFields())}
              />
            </Form.Item>
          )}

          <Form.Item>
            <Button
              type="primary"
              onClick={handleButtonClick}
              loading={formLoading}
            >
              {formChanged
                ? translate("buttons.save")
                : translate("buttons.back")}
            </Button>
          </Form.Item>
        </Form>
      </CreateOrEdit>

    </Show>
  );
};
