import React, { useRef, useEffect } from "react";
import {
  useTranslate,
  useGetLocale,
  IResourceComponentsProps,
  useNavigation,
  useResource,
  useCan,
} from "@refinedev/core";
import enUS from "antd/es/date-picker/locale/en_US";
import zhCN from "antd/es/date-picker/locale/zh_CN";
import { useForm, Show } from "@refinedev/antd";
import {
  Form,
  Input,
  Select,
  DatePicker,
  Row,
  Col,
  Button,
  Card,
} from "antd";
import dayjs from "dayjs";
import config from "../../config";
import { CreateOrEdit } from "../../components/crud/createOrEdit";
import FileListUploadAndEdit from "./fileListUploadAndEdit";

const { TextArea } = Input;

export const IssueCreateOrEdit: React.FC<IResourceComponentsProps> = (props) => {
  const { formProps, saveButtonProps, formLoading, queryResult } = useForm({
    refineCoreProps: {
      redirect: "show",
      onMutationSuccess: () => {
        window.scrollTo(0, 0);
      },
    },
  });

  const { list } = useNavigation();
  const { resource } = useResource();

  const formRef = useRef<any>(null);

  const translate = useTranslate();
  const locale = useGetLocale();
  const currentLocale = locale();
  const datePickerLocale = currentLocale === "zh-CN" ? zhCN : enUS;
  const issueData = queryResult?.data?.data;
  const departments = props.options?.departments ?? { array: [], map: {} };

  const { data: editIssueAccess } = useCan({
    resource: resource?.name,
    action: "editIssue",
    params: { id: issueData?.id, resource }
  });

  const { data: accessRiskTypeAccess } = useCan({
    resource: resource?.name,
    action: "accessRiskType",
    params: { id: issueData?.id, resource }
  });

  const { data: editRemediationDepartmentsAccess } = useCan({
    resource: resource?.name,
    action: "editRemediationDepartments",
    params: { id: issueData?.id, resource }
  });

  const { data: showRemediationDepartmentsAccess } = useCan({
    resource: resource?.name,
    action: "showRemediationDepartments",
    params: { id: issueData?.id, resource }
  });

  const { data: submitRemediationInputAccess } = useCan({
    resource: resource?.name,
    action: "submitRemediationInput",
    params: { id: issueData?.id, resource }
  });

  const { data: reviewRemediationActionByLineAccess } = useCan({
    resource: resource?.name,
    action: "reviewRemediationActionByLine",
    params: { id: issueData?.id, resource }
  });

  const { data: viewRemediationDocumentsAccess } = useCan({
    resource: resource?.name,
    action: "viewRemediationDocuments",
    params: { id: issueData?.id, resource }
  });

  const { data: reviewRemediationActionByIADAccess } = useCan({
    resource: resource?.name,
    action: "reviewRemediationActionByIAD",
    params: { id: issueData?.id, resource }
  });

  const departmentOptions = React.useMemo(() => {
    return departments.array.map((department: any, index: number) => ({
      key: `dept-${department.code}-${index}`,
      value: department.code,
      label: currentLocale === "zh-CN" ? department.chineseName : department.englishName,
    }));
  }, [departments, currentLocale]);

  const isRemediationInProgress = issueData?.status === "REMEDIATION_IN_PROGRESS";

  const handleButtonClick = () => {
    const form = formRef.current;
    if (form && form.isFieldsTouched()) {
      form.submit();
    } else {
      list(resource?.name || "issues");
    }
  };

  const initialValues = React.useMemo(() => {
    const lineDepartmentCode = issueData?.lineOrgUnitId
      ? Object.keys(departments.map).find((code) => departments.map[code]?.id === issueData.lineOrgUnitId)
      : undefined;

    const remediations = issueData?.remediations ?? [];

    return {
      ...issueData,
      lineDepartmentCode,
      remediations
    };
  }, [issueData, departments.map]);

  // 获取当前表单中的 remediations 值，如果没有则使用 issueData 中的值
  const currentRemediations = Form.useWatch('remediations', formProps.form) || issueData?.remediations || [];

  // 计算当前选中的部门代码 - 通过 orgUnitId 查找对应的 departmentCode
  const selectedDepartmentCodes = currentRemediations.map((r: any) => {
    console.log('Processing remediation:', r);
    if (r.departmentCode) {
      console.log('Found departmentCode:', r.departmentCode);
      return r.departmentCode;
    }
    // 如果没有 departmentCode，通过 orgUnitId 查找
    if (r.orgUnitId) {
      console.log('Looking for orgUnitId:', r.orgUnitId);
      const department = departments.array.find((d: any) => {
        console.log('Comparing with department:', d.id, 'vs', r.orgUnitId);
        return d.id === r.orgUnitId;
      });
      console.log('Found department:', department);
      return department?.code;
    }
    return null;
  }).filter(Boolean);

  // 调试日志 - 添加更详细的调试
  console.log('Debug - currentRemediations:', currentRemediations);
  console.log('Debug - first remediation structure:', currentRemediations[0]);
  console.log('Debug - departments.array:', departments.array);
  console.log('Debug - selectedDepartmentCodes after fix:', selectedDepartmentCodes);
  console.log('Debug - issueData remediations:', issueData?.remediations);

  // 确保表单初始化后，Select 显示正确的选中状态
  useEffect(() => {
    if (formProps.form && issueData?.remediations) {
      console.log('Setting form remediations:', issueData.remediations);
      formProps.form.setFieldValue('remediations', issueData.remediations);
    }
  }, [issueData?.id, formProps.form]);

  return (
    <Show>
      <CreateOrEdit
        action={props.options?.action || "create"}
        saveButtonProps={{
          ...saveButtonProps,
          style: { display: 'none' }
        }}
        isLoading={formLoading}
      >
        <Form
          {...formProps}
          ref={formRef}
          layout="vertical"
          initialValues={initialValues}
          key={issueData?.id || 'new'}
        >
          <Form.Item name="id" hidden>
            <Input />
          </Form.Item>
          <Form.Item name="lastModifiedAt" hidden>
            <Input />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.reportName")}
            name="reportName"
            rules={[{ required: true, message: translate("errors.required") }]}
          >
            <Input
              disabled={!editIssueAccess?.can}
              variant={!editIssueAccess?.can ? "filled" : "outlined"}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.masNumber")}
            name="masNumber"
          >
            <Input
              disabled={!editIssueAccess?.can}
              variant={!editIssueAccess?.can ? "filled" : "outlined"}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.inspectionDepartment")}
                name="inspectionDepartmentCode"
              >
                <Select
                  allowClear
                  disabled={!editIssueAccess?.can}
                  variant={!editIssueAccess?.can ? "filled" : "outlined"}
                  options={config.issue.inspectionDepartmentCodes.map((code, index) => ({
                    key: `inspection-${code}-${index}`,
                    value: code,
                    label: translate(`issues.inspectionDepartment.${code}`)
                  }))}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.inspectionYear")}
                name="inspectionYear"
                getValueFromEvent={(value) => value ? value.format("YYYY") : ""}
                getValueProps={(value) => ({ value: value ? dayjs(value, "YYYY") : undefined })}
              >
                <DatePicker
                  picker="year"
                  locale={datePickerLocale}
                  style={{ width: "100%" }}
                  placeholder={translate("issues.fields.inspectionYear")}
                  disabled={!editIssueAccess?.can}
                  variant={!editIssueAccess?.can ? "filled" : "outlined"}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            label={translate("issues.fields.findingsEnglish")}
            name="findingsEnglish"
          >
            <TextArea
              rows={3}
              disabled={!editIssueAccess?.can}
              variant={!editIssueAccess?.can ? "filled" : "outlined"}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.findingsChinese")}
            name="findingsChinese"
          >
            <TextArea
              rows={3}
              disabled={!editIssueAccess?.can}
              variant={!editIssueAccess?.can ? "filled" : "outlined"}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.auditRecommendationsEnglish")}
            name="auditRecommendationsEnglish"
          >
            <TextArea
              rows={3}
              disabled={!editIssueAccess?.can}
              variant={!editIssueAccess?.can ? "filled" : "outlined"}
            />
          </Form.Item>

          <Form.Item
            label={translate("issues.fields.auditRecommendationsChinese")}
            name="auditRecommendationsChinese"
          >
            <TextArea
              rows={3}
              disabled={!editIssueAccess?.can}
              variant={!editIssueAccess?.can ? "filled" : "outlined"}
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.lineDepartment")}
                name="lineDepartmentCode"
              >
                <Select
                  key={currentLocale}
                  allowClear
                  options={departmentOptions}
                  disabled={!editIssueAccess?.can}
                  variant={!editIssueAccess?.can ? "filled" : "outlined"}
                  onChange={(value) => {
                    const orgUnitId = value ? departments.map[value]?.id : null;
                    formProps.form?.setFieldValue('lineOrgUnitId', orgUnitId);
                  }}
                />
              </Form.Item>
              <Form.Item name="lineOrgUnitId" hidden>
                <Input />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.nextFollowUpDate")}
                name="nextFollowUpDate"
                getValueFromEvent={(value) => value ? value.format("YYYY-MM") : ""}
                getValueProps={(value) => ({ value: value ? dayjs(value, "YYYY-MM") : undefined })}
              >
                <DatePicker
                  picker="month"
                  locale={datePickerLocale}
                  style={{ width: "100%" }}
                  placeholder={translate("issues.fields.nextFollowUpDate")}
                  disabled={!editIssueAccess?.can}
                  variant={!editIssueAccess?.can ? "filled" : "outlined"}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label={translate("issues.fields.recurringType")}
                name="recurringType"
              >
                <Select
                  allowClear
                  disabled={!editIssueAccess?.can}
                  variant={!editIssueAccess?.can ? "filled" : "outlined"}
                  options={config.issue.recurringType.map((option, index) => ({
                    key: `recurring-${option}-${index}`,
                    value: option,
                    label: translate(`issues.recurringType.${option}`),
                  }))}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              {accessRiskTypeAccess?.can && (
                <Form.Item
                  label={translate("issues.fields.riskType")}
                  name="riskType"
                >
                  <Select
                    allowClear
                    disabled={!editIssueAccess?.can}
                    variant={!editIssueAccess?.can ? "filled" : "outlined"}
                    options={config.issue.riskType.map((option, index) => ({
                      key: `risk-${option}-${index}`,
                      value: option,
                      label: translate(`issues.riskType.${option}`),
                    }))}
                  />
                </Form.Item>
              )}
            </Col>
          </Row>

          <Form.List name="remediations">
            {(fields) => (
              <>
                {fields.map((field, index) => {
                  const remediation = formProps.form?.getFieldValue(['remediations', index]) || {};
                  const status = remediation?.status || "DRAFT";
                  const remediationId = remediation?.id;

                  const canEditRemediationPlan = submitRemediationInputAccess?.can &&
                    (status === "PENDING_REMEDIATION_DEPT_INPUT" || status === "DRAFT");

                  const canEditLineDeptComment = reviewRemediationActionByLineAccess?.can &&
                    status === "PENDING_LINE_DEPT_VERIFICATION";

                  const canEditIADAssessment = reviewRemediationActionByIADAccess?.can &&
                    status === "PENDING_IAD_ASSESSMENT";

                  return (
                    <Card
                      key={`remediation-card-${field.key}-${index}`}
                      style={{ marginBottom: 16 }}
                      variant="outlined"
                    >
                      <Form.Item name={[field.name, 'id']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'issueId']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'departmentCode']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'status']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'lastModifiedAt']} hidden>
                        <Input />
                      </Form.Item>
                      <Form.Item name={[field.name, 'orgUnitId']} hidden>
                        <Input />
                      </Form.Item>

                      <div style={{ fontWeight: 600, marginBottom: 8, display: 'flex', justifyContent: 'space-between' }}>
                        <span>
                          {departments.array.find((dept: { id: any; }) => dept.id === remediation?.orgUnitId)?.[currentLocale === "zh-CN" ? "chineseName" : "englishName"]}
                        </span>
                        <span style={{ border: '1px solid #ccc', borderRadius: '4px', padding: '2px 6px' }}>{status}</span>
                      </div>

                      <Form.Item
                        label={translate("remediations.fields.planEnglish")}
                        name={[field.name, 'planEnglish']}
                        rules={[{ required: true, message: translate("errors.required") }]}
                      >
                        <Input
                          disabled={!canEditRemediationPlan}
                          variant={!canEditRemediationPlan ? "filled" : "outlined"}
                        />
                      </Form.Item>

                      <Form.Item
                        label={translate("remediations.fields.planChinese")}
                        name={[field.name, 'planChinese']}
                        rules={[{ required: true, message: translate("errors.required") }]}
                      >
                        <Input
                          disabled={!canEditRemediationPlan}
                          variant={!canEditRemediationPlan ? "filled" : "outlined"}
                        />
                      </Form.Item>

                      <Form.Item
                        label={translate("remediations.fields.deadline")}
                        name={[field.name, 'deadline']}
                        rules={[{ required: true, message: translate("errors.required") }]}
                        getValueFromEvent={(value) => value ? value.format("YYYY-MM") : ""}
                        getValueProps={(value) => ({ value: value ? dayjs(value, "YYYY-MM") : undefined })}
                      >
                        <DatePicker
                          picker="month"
                          locale={datePickerLocale}
                          style={{ width: "100%" }}
                          placeholder={translate("common.SelectMonth")}
                          disabled={!canEditRemediationPlan}
                          variant={!canEditRemediationPlan ? "filled" : "outlined"}
                        />
                      </Form.Item>

                      {(status === "PENDING_REMEDIATION_DEPT_ACTION" ||
                        status === "PENDING_LINE_DEPT_VERIFICATION" ||
                        status === "PENDING_IAD_ASSESSMENT") && (
                          <>
                            <Form.Item
                              label={translate("remediations.fields.lineDeptVerificationComment")}
                              name={[field.name, 'lineDeptVerificationComment']}
                              rules={[
                                {
                                  required: canEditLineDeptComment,
                                  message: translate("errors.required"),
                                },
                              ]}
                            >
                              <Input
                                disabled={!canEditLineDeptComment}
                                variant={!canEditLineDeptComment ? "filled" : "outlined"}
                              />
                            </Form.Item>

                            <Form.Item
                              label={translate("remediations.fields.remediationDeptComment")}
                              name={[field.name, 'remediationDeptComment']}
                            >
                              <Input
                                disabled={true}
                                variant="filled"
                              />
                            </Form.Item>
                          </>
                        )}

                      {status === "PENDING_IAD_ASSESSMENT" && (
                        <>
                          <Form.Item
                            label={translate("remediations.fields.followUp")}
                            name={[field.name, 'followUp']}
                          >
                            <Input
                              disabled={!canEditIADAssessment}
                              variant={!canEditIADAssessment ? "filled" : "outlined"}
                            />
                          </Form.Item>

                          <Form.Item
                            label={translate("remediations.fields.followUpDate")}
                            name={[field.name, 'followUpDate']}
                            getValueFromEvent={(value) => value ? value.format("YYYY-MM") : ""}
                            getValueProps={(value) => ({ value: value ? dayjs(value, "YYYY-MM") : undefined })}
                          >
                            <DatePicker
                              picker="month"
                              locale={datePickerLocale}
                              style={{ width: "100%" }}
                              placeholder={translate("remediations.fields.followUpDate")}
                              disabled={!canEditIADAssessment}
                              variant={!canEditIADAssessment ? "filled" : "outlined"}
                            />
                          </Form.Item>

                          <Form.Item
                            label={translate("remediations.fields.iadAssessmentStatus")}
                            name={[field.name, 'iadAssessmentStatus']}
                          >
                            <Select
                              allowClear
                              disabled={!canEditIADAssessment}
                              variant={!canEditIADAssessment ? "filled" : "outlined"}
                              options={config.issue.iadAssessmentStatus.map((option: string, index: number) => ({
                                key: `iad-${option}-${index}`,
                                value: option,
                                label: translate(`remediations.iadAssessmentStatus.${option}`),
                              }))}
                            />
                          </Form.Item>
                        </>
                      )}

                      {viewRemediationDocumentsAccess?.can && (
                        (status === "PENDING_REMEDIATION_DEPT_ACTION" ||
                          status === "PENDING_LINE_DEPT_VERIFICATION" ||
                          status === "PENDING_IAD_ASSESSMENT") && (
                        <div style={{ marginTop: 16 }}>
                          <FileListUploadAndEdit remediationId={remediationId} />
                        </div>
                        )
                      )}
                    </Card>
                  );
                })}
              </>
            )}
          </Form.List>

          {!isRemediationInProgress && editRemediationDepartmentsAccess?.can && (
            <Form.Item
              label={translate("issues.fields.remediationDepartments")}
            >
              <Select
                mode="multiple"
                allowClear
                placeholder={translate("issues.fields.remediationDepartments")}
                defaultValue={selectedDepartmentCodes}
                value={selectedDepartmentCodes}
                key={`select-${issueData?.id || 'new'}-${JSON.stringify(selectedDepartmentCodes)}`}
                onChange={(selectedCodes) => {
                  const uniqueCodes = Array.from(new Set(selectedCodes));
                  const newRemediations = uniqueCodes.map((departmentCode: string) => {
                    const existingRemediation = currentRemediations.find((r: any) => r.departmentCode === departmentCode);
                    const department = departments.array.find((d: any) => d.code === departmentCode);
                    return existingRemediation || {
                      departmentCode,
                      orgUnitId: department?.id,
                      status: "DRAFT"
                    };
                  });
                  formProps.form?.setFieldValue('remediations', newRemediations);
                }}
                options={departments.array.map((d: any, index: number) => ({
                  key: `remediation-dept-${d.code}-${index}`,
                  label: currentLocale === "zh-CN" ? d.chineseName : d.englishName,
                  value: d.code,
                }))}
                disabled={!editRemediationDepartmentsAccess?.can}
                variant={!editRemediationDepartmentsAccess?.can ? "filled" : "outlined"}
              />
            </Form.Item>
          )}

          <Form.Item>
            <Button
              type="primary"
              onClick={handleButtonClick}
              loading={formLoading}
            >
              {formRef.current?.isFieldsTouched()
                ? translate("buttons.save")
                : translate("buttons.back")}
            </Button>
          </Form.Item>
        </Form>
      </CreateOrEdit>
    </Show>
  );
};
